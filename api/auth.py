# Basic authentication support.

from flask_httpauth import HTTPBasicAuth
from api.models import User
from api.errors import error_response
from flask_httpauth import HTTPTokenAuth

# The HTTPBasicAuth class from Flask-HTTPAuth is the one that implements the basic authentication flow. 
# The two required functions are configured through the verify_password and error_handler decorators respectively.
basic_auth = HTTPBasicAuth()
# Create a second authentication instance based on the HTTPTokenAuth class
token_auth = HTTPTokenAuth()

# The verification function receives the username and password that the client provided 
# and returns the authenticated user if the credentials are valid or None if not
# The authenticated user will then be available as basic_auth.current_user(), so that it can be used in the API view functions.
@basic_auth.verify_password
def verify_password(username, password):
    user = User.query.filter_by(username=username).first()
    if user and user.check_password(password):
        return user

# The error handler function returns a standard error response, which is generated by the error_response() function
@basic_auth.error_handler
def basic_auth_error(status):
    return error_response(status)

@token_auth.verify_token
def verify_token(token):
    return User.check_token(token) if token else None

@token_auth.error_handler
def token_auth_error(status):
    return error_response(status)